/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as LegalIndexRouteImport } from './routes/legal/index'
import { Route as HomeIndexRouteImport } from './routes/home/index'
import { Route as CallbackIndexRouteImport } from './routes/callback/index'
import { Route as AccountIndexRouteImport } from './routes/account/index'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const LegalIndexRoute = LegalIndexRouteImport.update({
  id: '/legal/',
  path: '/legal/',
  getParentRoute: () => rootRouteImport,
} as any)
const HomeIndexRoute = HomeIndexRouteImport.update({
  id: '/home/',
  path: '/home/',
  getParentRoute: () => rootRouteImport,
} as any)
const CallbackIndexRoute = CallbackIndexRouteImport.update({
  id: '/callback/',
  path: '/callback/',
  getParentRoute: () => rootRouteImport,
} as any)
const AccountIndexRoute = AccountIndexRouteImport.update({
  id: '/account/',
  path: '/account/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/account': typeof AccountIndexRoute
  '/callback': typeof CallbackIndexRoute
  '/home': typeof HomeIndexRoute
  '/legal': typeof LegalIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/account': typeof AccountIndexRoute
  '/callback': typeof CallbackIndexRoute
  '/home': typeof HomeIndexRoute
  '/legal': typeof LegalIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/account/': typeof AccountIndexRoute
  '/callback/': typeof CallbackIndexRoute
  '/home/': typeof HomeIndexRoute
  '/legal/': typeof LegalIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/account' | '/callback' | '/home' | '/legal'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/account' | '/callback' | '/home' | '/legal'
  id: '__root__' | '/' | '/account/' | '/callback/' | '/home/' | '/legal/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AccountIndexRoute: typeof AccountIndexRoute
  CallbackIndexRoute: typeof CallbackIndexRoute
  HomeIndexRoute: typeof HomeIndexRoute
  LegalIndexRoute: typeof LegalIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/legal/': {
      id: '/legal/'
      path: '/legal'
      fullPath: '/legal'
      preLoaderRoute: typeof LegalIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/home/': {
      id: '/home/'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/callback/': {
      id: '/callback/'
      path: '/callback'
      fullPath: '/callback'
      preLoaderRoute: typeof CallbackIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/account/': {
      id: '/account/'
      path: '/account'
      fullPath: '/account'
      preLoaderRoute: typeof AccountIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AccountIndexRoute: AccountIndexRoute,
  CallbackIndexRoute: CallbackIndexRoute,
  HomeIndexRoute: HomeIndexRoute,
  LegalIndexRoute: LegalIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
